from telegram import Update, ReplyKeyboardMarkup, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CallbackContext, Filters
from telegram.ext import CommandHandler, ConversationHandler, MessageHandler, CallbackQueryHandler

from datetime import time
import pytz
import re

import logging

from config import bot_token
import myparcer

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def start(update: Update, context: CallbackContext):
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list={'url': {}, 'name': {}, 'status': {},
                                                                            'latest_date': {},
                                                                            'latest_chapter_name': {}})

    reply_keyboard = [['/add', '/delete'], ['/favorites', '/predict'], ['/set_notifications', '/help']]

    update.message.reply_text(text=fr'–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}!'
                              '\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏ –∏ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ '
                              '–Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã.'
                              '\n–ß—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /help',
                              reply_markup=ReplyKeyboardMarkup(keyboard=reply_keyboard,
                                                               one_time_keyboard=False,
                                                               input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'))


def help_(update: Update, context: CallbackContext):
    update.message.reply_text(text='–ö–æ–º–∞–Ω–¥—ã: '
                              '\n1) <i>/add</i> - –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞–Ω–≥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚úÖ'
                              '\n2) <i>/delete</i> - —É–¥–∞–ª—è–µ—Ç –º–∞–Ω–≥—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚ùå'
                              '\n3) <i>/favorites</i> - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§'
                              '\n4) <i>/predict</i> - –ø—Ä–æ–≥–Ω–æ–∑ –¥–∞—Ç—ã –≤—ã—Ö–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤—ã —Ç–∞–π—Ç–ª–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æüîÆ'
                              '\n5) <i>/set_notifications</i> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö ‚è∞',
                              parse_mode=ParseMode.HTML)


ADD = 1


def add(update: Update, context: CallbackContext):
    update.message.reply_text('–°–∫–∏–Ω—å—Ç–µ –≤ —á–∞—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–Ω–≥—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ \n \n'
                              '–ü—Ä–∏–º–µ—Ä: \n'
                              'https://mangalib.me/bungou-stray-dogs?section=chapters')
    return ADD


def add_v2(update: Update, context: CallbackContext):
    url = update.message.text
    manga_list = myparcer.load_json(file_name=str(update.effective_user.id))
    update.message.reply_text(myparcer.add_manga(url=url, manga_list=manga_list))
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list=manga_list)
    return ConversationHandler.END


def add_cancel(update: Update, context: CallbackContext):
    return ConversationHandler.END


DEL = 3


def delete(update: Update, context: CallbackContext):
    manga_list = myparcer.load_json(file_name=str(update.effective_user.id))
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list=manga_list)

    keyboard = [[InlineKeyboardButton(i, callback_data=i)] for i in manga_list['url'].keys()]
    update.message.reply_text(text='–ö–∞–∫—É—é –º–∞–Ω–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?',
                              reply_markup=InlineKeyboardMarkup(keyboard))
    return DEL


def delete_v2(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    name = query.data

    name = query.data
    manga_list = myparcer.load_json(file_name=str(update.effective_user.id))
    query.bot.send_message(chat_id=query.message.chat_id,
                           text=myparcer.delete_manga(name=name, manga_list=manga_list))
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list=manga_list)
    return ConversationHandler.END


def delete_cancel(update: Update, context: CallbackContext):
    return ConversationHandler.END


def favorites(update: Update, context: CallbackContext):
    manga_list = myparcer.load_json(file_name=str(update.effective_user.id))
    update.message.reply_text('\n'.join(myparcer.favorites(manga_list=manga_list)))
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list=manga_list)


def notification(context: CallbackContext):
    manga_list = myparcer.load_json(file_name=str(context.job.context[1]))
    new_chapters_list = myparcer.new_chapters_list(manga_list)
    myparcer.save_json(file_name=str(context.job.context[1]), manga_list=manga_list)

    if len(new_chapters_list) == 0:
        context.bot.send_message(chat_id=context.job.context[0],
                                 text='–ù–æ–≤—ã—Ö –≥–ª–∞–≤ –Ω–µ—Çüò•')

    else:
        context.bot.send_message(chat_id=context.job.context[0],
                                 text='–í—ã—à–ª–∏ –Ω–æ–≤—ã–µ –≥–ª–∞–≤—ã: \n' + '\n'.join(new_chapters_list))
        context.bot.send_animation(chat_id=context.job.context[0],
                                   animation='https://i.pinimg.com/originals/df/e2/61'
                                             '/dfe2616671565bd2e8b65197f85fc0fc.gif')


TIME = 2


def set_notifications(update: Update, context: CallbackContext):
    update.message.reply_text('–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è‚è∞?\n'
                              '–ü—Ä–∏–º–µ—Ä: \n'
                              '12:5')
    return TIME


def set_notifications_v2(update: Update, context: CallbackContext):
    time_ = update.message.text
    if re.compile('^[1-2]?[0-9]:[1-5]?[0-9]$').match(time_):
        update.message.reply_text(text=fr'–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –º–∞–Ω–≥–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {time_}')
        context.job_queue.run_daily(notification, context=(update.message.chat_id, update.effective_user.id),
                                    time=time(hour=int(time_.split(':')[0]),
                                              minute=int(time_.split(':')[1]),
                                              tzinfo=pytz.timezone("Europe/Moscow")))
    else:
        update.message.reply_text(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –°–ª–µ–¥—É–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: \n'
                                       '/set_notifications 18:7')
    return ConversationHandler.END


def set_notifications_cancel(update: Update, context: CallbackContext):
    return ConversationHandler.END


PRED = 5


def predict(update: Update, context: CallbackContext):
    manga_list = myparcer.load_json(file_name=str(update.effective_user.id))
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list=manga_list)

    keyboard = [[InlineKeyboardButton(i, callback_data=i)] for i in manga_list['url'].keys()]
    update.message.reply_text(text='–î–∞—Ç—É –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã –∫–∞–∫–æ–≥–æ —Ç–∞–π—Ç–ª–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å?',
                              reply_markup=InlineKeyboardMarkup(keyboard))
    return PRED


def predict_v2(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    name = query.data

    manga_list = myparcer.load_json(file_name=str(update.effective_user.id))
    myparcer.save_json(file_name=str(update.effective_user.id), manga_list=manga_list)

    query.bot.send_message(chat_id=query.message.chat_id,
                           text='–í—ã—á–∏—Å–ª—è—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...')
    query.bot.send_animation(chat_id=query.message.chat_id,
                             animation='https://i.pinimg.com/originals/8f/0b/5b/8f0b5b1235851fbf248d32dc0a97963f.gif')
    query.bot.send_message(chat_id=query.message.chat_id,
                           text=myparcer.predict(name=name, manga_list=manga_list))
    return ConversationHandler.END


def predict_cancel(update: Update, context: CallbackContext):
    return ConversationHandler.END


def main() -> None:
    updater = Updater(bot_token)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('help', help_))
    dispatcher.add_handler(ConversationHandler(entry_points=[CommandHandler('add', add)],
                                               states={ADD: [MessageHandler(Filters.text & ~Filters.command, add_v2)]},
                                               fallbacks=[CommandHandler('a_cancel', add_cancel)]))
    dispatcher.add_handler(ConversationHandler(entry_points=[CommandHandler('delete', delete)],
                                               states={DEL: [CallbackQueryHandler(delete_v2)]},
                                               fallbacks=[CommandHandler('d_cancel', delete_cancel)]))
    dispatcher.add_handler(CommandHandler('favorites', favorites))
    dispatcher.add_handler(ConversationHandler(entry_points=[CommandHandler('set_notifications', set_notifications)],
                                               states={TIME: [MessageHandler(Filters.text & ~Filters.command, set_notifications_v2)]},
                                               fallbacks=[CommandHandler('s_cancel', set_notifications_cancel)]))
    dispatcher.add_handler(ConversationHandler(entry_points=[CommandHandler('predict', predict)],
                                               states={PRED: [CallbackQueryHandler(predict_v2)]},
                                               fallbacks=[CommandHandler('p_cancel', predict_cancel)]))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
