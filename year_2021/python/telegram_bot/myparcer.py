from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

import json
import datetime
import re

from pmdarima.arima import auto_arima


def get_page(url):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    driver = webdriver.Chrome(chrome_options=chrome_options)
    driver.get(url)
    page = BeautifulSoup(driver.page_source, 'lxml')
    driver.quit()
    return page


def get_name(page):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–Ω–≥–∏
    """
    return page.find('div', class_='media-name__main').text.strip()


def get_status(page):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∞–Ω–≥–∏: –∞–Ω–æ–Ω—Å, –æ–Ω–≥–æ–∏–Ω–≥, –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    """
    index = list(map(lambda x: x.text.strip(), page.find_all('div', class_='media-info-list__title'))).index('–°—Ç–∞—Ç—É—Å —Ç–∞–π—Ç–ª–∞')
    return page.find_all('div', class_='media-info-list__value')[index].text.strip()


def get_latest_date(page):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    return page.find_all('div', 'media-chapter__date')[0].text.strip()


def get_latest_chapter_name(page):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–ª–∞–≤—ã
    """
    return page.find_all('div', class_='media-chapter__name text-truncate')[0].text.strip()


def add_manga(url, manga_list):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞–Ω–≥—É –≤ —Å–ø–∏—Å–æ–∫ "–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" (manga_list):
    –ø–æ —Ç–∞–π—Ç–ª–∞–º –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    if re.compile('^https://mangalib.me.').match(url):
        page = get_page(url)

        if get_status(page) != '–û–Ω–≥–æ–∏–Ω–≥':
            return '–ú–∞–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞/–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞. –ù–æ–≤—ã—Ö –≥–ª–∞–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –Ω–µ –±—É–¥–µ—Ç üò≠'

        try:
            get_latest_date(page)

            name = get_name(page)

            manga_list['url'][name] = url
            manga_list['name'][name] = name
            manga_list['status'][name] = get_status(page)
            manga_list['latest_date'][name] = get_latest_date(page)
            manga_list['latest_chapter_name'][name] = get_latest_chapter_name(page)

            return '–ú–∞–Ω–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –Ω–∞–∂–º–∏—Ç–µ /add'

        except:
            return '–ü–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ'

    else:
        return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏'


def favorites(manga_list):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤
    """
    return list(manga_list['url'].keys())


def delete_manga(name, manga_list):
    """
    –£–¥–∞–ª—è–µ—Ç –º–∞–Ω–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    """
    if name in manga_list['url'].keys():
        for key in manga_list.keys():
            del manga_list[key][name]
        return '–ú–∞–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'

    else:
        return '–î–∞–Ω–Ω—ã–π —Ç–∞–π—Ç–ª –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'


def check_new_chapter(name, manga_list):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã—à–ª–∞ –ª–∏ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞ –º–∞–Ω–≥–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—ã—à–ª–∞, –∏–Ω–∞—á–µ - False; –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ "–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    """
    page = get_page(manga_list['url'][name])

    if get_latest_chapter_name(page) != manga_list['latest_chapter_name'][name]:
        manga_list['latest_chapter_name'][name] = get_latest_chapter_name(page)
        manga_list['latest_date'][name] = get_latest_date(page)
        return True
    else:
        return False


def new_chapters_list(manga_list):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–π—Ç–ª–æ–≤ –∏–∑ "–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" (manga_list), –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã—à–ª–∞ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞
    """
    return [name for name in manga_list['url'].keys() if check_new_chapter(name, manga_list) is True]


def predict(name, manga_list):
    """
    –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤—ã
    """
    if name in manga_list['url'].keys():
        page = get_page(manga_list['url'][name])

        dates = list(map(lambda x: datetime.datetime.strptime(x.text.strip(), '%d.%m.%Y'),
                         page.find_all('div', class_='media-chapter__date')))
        dates.sort()
        dates = dates[-10:]
        if len(dates) <=2:
            return '–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'
        else:
            intervals = [(dates[i] - dates[i - 1]).days for i in range(1, len(dates))]
            model = auto_arima(intervals)
            pred_date = dates[-1] + datetime.timedelta(model.predict(1)[0] // 1 + 1)
            return pred_date.strftime('%d.%m.%Y') if pred_date > datetime.datetime.today() else '–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'

    else:
        return '–î–∞–Ω–Ω—ã–π —Ç–∞–π—Ç–ª –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'


def save_json(file_name: str, manga_list: dict):
    with open(file_name + '.json', 'w') as fp:
        json.dump(manga_list, fp)


def load_json(file_name: str):
    with open(file_name + '.json', 'r') as fp:
        manga_list = json.load(fp)
    return manga_list
